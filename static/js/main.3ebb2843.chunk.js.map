{"version":3,"sources":["components/startscreen.js","components/genrebutton.js","components/genrescreen.js","components/circlecolor.js","components/albumimg.js","components/albumimgwrapper.js","components/guessubmit.js","components/guessinput.js","components/guesswrapper.js","components/resultentry.js","components/results.js","components/albumwrapper.js","components/gamescreen.js","apicalls.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["StartScreen","props","token","Cookies","get","className","onClick","retToken","setScreen","redirectUri","clientID","scopes","Scopes","userReadPrivate","GenreButton","reverse","val","k","GenreScreen","useState","indie","setIndie","pop","setPop","rock","setRock","hiphop","setHH","error","setError","genres","Object","keys","map","value","class","templist","push","setGenres","length","CircleColor","hex","setHex","useEffect","r","fill","color","stroke","strokeWidth","AlbumImg","palette","setPalette","imgArr","Array","from","albumimg","img","colorThief","ColorThief","colorArr","Image","addEventListener","g","b","colors","getPalette","x","toString","join","crossOrigin","src","counter","pixelSize","width","height","AlbumImgWrapper","albums","GuessSubmit","inc","GuessInput","type","name","placeholder","autocomplete","guess","onChange","changeHandler","GuessWrapper","ResultEntry","album","Results","Fragment","guessList","i","emptyGuessList","AlbumWrapper","setCounter","correct","setCorrect","updateGuess","setGuessList","style","actual","stringSimilarity","compareTwoStrings","toLowerCase","replace","target","GameScreen","songs","getSongsFromGenre","genre_string","console","log","fetch","method","headers","then","resp","json","Main","screen","setToken","setSongs","setScreenByVal","screens","tracks","id","images","url","artists","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ebb2843.chunk.js","sourcesContent":["import React from 'react';\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\nimport Cookies from 'js-cookie'\n\nconst StartScreen = (props) => {\n    const token = Cookies.get('spotifyAuthToken')\n    return (\n        <div className=\"startscreen\">\n            <h1>Welcome to The Album Cover Quiz!</h1><br /><br />\n            <h2>10 random pixelated album covers and their color palette will be shown. From there, guess each album title!</h2>\n            {token ? (\n                <button\n                    className=\"startbtn\"\n                    onClick={() => { props.retToken(token); props.setScreen(1); }}\n                >\n                    Start!\n                </button>\n            ) : (\n                    <SpotifyAuth\n                        redirectUri='http://https://nicholasraffone.github.io/album-game/'\n                        clientID='a836b5558bcd405baabbffe163ef65f9'\n                        scopes={[Scopes.userReadPrivate, 'user-read-email']}\n                    />\n                )}\n        </div>\n    )\n}\nexport default StartScreen;\n","import React, { useEffect, useState } from 'react';\n\nconst GenreButton = (props) => {\n\n    return (\n        <div className=\"genrebutton\">\n            <button onClick={props.reverse} className={`${props.val ? \"green\" : \"red\"}`}>\n                {props.k}\n            </button>\n        </div>\n    );\n};\n\nexport default GenreButton;\n","import React, { useState } from 'react';\nimport GenreButton from './genrebutton'\n\nconst GenreScreen = (props) => {\n    const [indie, setIndie] = useState(false);\n    const [pop, setPop] = useState(false);\n    const [rock, setRock] = useState(false);\n    const [hiphop, setHH] = useState(false);\n    const [error, setError] = useState(false);\n\n    const genres = {\n        'indie': [indie, () => setIndie(!indie)],\n        'pop': [pop, () => setPop(!pop)],\n        'rock': [rock, () => setRock(!rock)],\n        'hip-hop': [hiphop, () => setHH(!hiphop)]\n    }\n    const submit = () => {\n        const templist = [];\n        Object.keys(genres).map(k => {\n            if (genres[k][0])\n                templist.push(k)\n        })\n        props.setGenres(templist);\n        if (templist.length !== 0) {\n            props.setScreen(2);\n        } else {\n            setError(true);\n        }\n    }\n    return (\n        <div className=\"genrescreen\">\n            <h1>Select Some Genres!</h1>\n            <div className=\"genres\">\n                {Object.keys(genres).map((k) => {\n                    let value = genres[k]\n                    return (\n                        <GenreButton\n                            reverse={value[1]}\n                            val={value[0]}\n                            k={k} />\n                    )\n                })}\n                <div className=\"genrebutton\">\n                    <button class=\"genresubmitbtn\" onClick={submit}>Submit</button>\n                </div>\n                {error ? <h3 class=\"errorgenre\">Please set at least 1 genre</h3> : null}\n            </div>\n        </div>\n    )\n}\nexport default GenreScreen;\n","import React, { useEffect, useState } from 'react';\nimport { Circle } from 'react-shapes';\n\nconst CircleColor = (props) => {\n    const [hex, setHex] = useState('');\n    useEffect(() => {\n        setHex(props.hex);\n    }, [props.hex]);\n\n    const getStyle = (val) => {\n        return ({ backgroundColor: { val } });\n    }\n\n    return (\n        <span>\n            {\n                (props.hex) ?\n                    <Circle\n                        r={30}\n                        fill={{ color: hex }}\n                        stroke={{ color: hex }}\n                        strokeWidth={3}\n                    /> :\n                    <br />\n            }\n        </span>\n    );\n};\n\nexport default CircleColor;\n","import React, { useEffect, useState } from 'react';\nimport CirlceColor from './circlecolor';\nimport { ImagePixelated } from \"react-pixelate\"\nimport ColorThief from \"colorthief\";\nimport CircleColor from './circlecolor';\n\nconst AlbumImg = (props) => {\n\n    const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {\n        const hex = x.toString(16)\n        return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n\n    const NUMCOLORS = 5;\n    const PIXELSIZE = 50;\n    const [palette, setPalette] = useState([]);\n    const imgArr = Array.from(props.albumimg, img => img[1])\n    const colorThief = new ColorThief();\n    let colorArr = [];\n    useEffect(() => {\n        const img = new Image();\n        img.addEventListener('load', function () {\n            const colors = colorThief.getPalette(img, NUMCOLORS);\n            for (const color of colors) {\n                const hex = rgbToHex(color[0], color[1], color[2])\n                colorArr.push(hex);\n            }\n            setPalette(colorArr)\n        });\n        img.crossOrigin = 'Anonymous';\n        img.src = imgArr[props.counter]\n    }, [props.counter, imgArr])\n    return (\n        <div>\n            <div>\n                <ImagePixelated\n                    src={imgArr[props.counter]}\n                    pixelSize={PIXELSIZE}\n                    width={400}\n                    height={400}\n                />\n            </div>\n            {\n                palette.map((val) => {\n                    return (<CircleColor hex={val} />);\n                })\n            }\n        </div>\n    );\n};\n\nexport default AlbumImg;\n","import React, { useEffect, useState } from 'react';\nimport AlbumImg from './albumimg';\n\nconst AlbumImgWrapper = (props) => {\n    return (\n        <div>\n            <AlbumImg\n                albumimg={props.albums}\n                counter={props.counter}\n            />\n        </div>\n    );\n}\n\nexport default AlbumImgWrapper;\n","import React, { useEffect, useState } from 'react';\n\nconst GuessSubmit = (props) => {\n    return (\n        <div className=\"guesssubmit\">\n            <button class=\"guesssubmitbtn\" onClick={props.inc}> Submit Guess </button>\n        </div>\n    );\n};\n\nexport default GuessSubmit;\n","import React, { useEffect, useState } from 'react';\n\n\nconst GuessInput = (props) => {\n    return (\n        <div className=\"guessinput\">\n            <input\n                class=\"guessinputfield\"\n                type=\"text\"\n                name=\"guess\"\n                placeholder=\"Enter Guess Here:\"\n                autocomplete=\"off\"\n                value={props.guess}\n                onChange={props.changeHandler}\n            />\n        </div>\n    );\n};\n\nexport default GuessInput;\n","import React, { useEffect, useState } from 'react';\nimport GuessSubmit from './guessubmit'\nimport GuessInput from './guessinput'\n\nconst GuessWrapper = (props) => {\n    return (\n        <div>\n            <GuessInput\n                inc={props.inc}\n                guess={props.guess}\n                changeHandler={props.changeHandler}\n            />\n            <GuessSubmit\n                inc={props.inc}\n            />\n        </div>\n    );\n};\n\nexport default GuessWrapper;\n","import React from 'react';\n\nconst ResultEntry = (props) => {\n    /** \n     props.albums format:\n    [\n        id,\n        image url,\n        album name,\n        artist name\n    ]\n    */\n    const correct = 'https://image.flaticon.com/icons/png/512/1828/1828644.png'\n    const incorrect = 'https://image.flaticon.com/icons/png/512/1828/1828843.png'\n    return (\n        <div class=\"resultentry\">\n            <img class=\"resultimg\" src={props.album[1]} />\n            <h2>{props.album[2]} - {props.album[3]}</h2>\n            <div className=\"resulticoncontainer\">\n                <div>\n                    <img className=\"resulticon\" src={props.guess ? correct : incorrect} />\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default ResultEntry;\n","import React from 'react';\nimport ResultEntry from './resultentry';\n\nconst Results = (props) => {\n    return (\n        <React.Fragment>\n            <div className=\"resultContainer\">\n                {\n                    props.guessList.map((val, i) => {\n                        return (<ResultEntry album={props.albums[i]} guess={val} />)\n                    })\n                }\n            </div>\n            <div className=\"restart\" onClick={() => { props.emptyGuessList(); props.setScreen(0) }}>\n                <h1>Click to Restart</h1>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\nimport stringSimilarity from 'string-similarity'\nimport AlbumImgWrapper from './albumimgwrapper';\nimport GuessWrapper from './guesswrapper';\nimport Results from './results'\n\nconst AlbumWrapper = (props) => {\n    const TOTAL = 10;\n    const [counter, setCounter] = useState(0);\n    const [correct, setCorrect] = useState(0);\n    const [guess, updateGuess] = useState('');\n    const [guessList, setGuessList] = useState([]);\n    /** \n     props.albums format:\n     [\n         id,\n         image url,\n         album name,\n         artist name\n     ]\n    */\n\n    const changeHandler = (val) => {\n        updateGuess(val.target.value);\n    }\n    const increment = () => {\n        const actual = props.albums[counter][2];\n        const similar = stringSimilarity.compareTwoStrings(guess.toLowerCase(), actual.toLowerCase().replace(/ *\\([^)]*\\) */g, \"\"));\n        if (similar >= 0.8) {\n            setCorrect(correct + 1)\n            guessList.push(true);\n        } else {\n            guessList.push(false);\n        }\n        setCounter(counter + 1);\n        updateGuess('');\n    };\n    return (\n        <div>\n            <h1 style={{ 'margin-top': '5px' }}>Your Score: {correct}/{counter}</h1>\n            {\n                (counter < TOTAL) ?\n                    (\n                        <React.Fragment>\n                            <AlbumImgWrapper\n                                albums={props.albums}\n                                counter={counter}\n                            />\n                            <GuessWrapper\n                                inc={increment}\n                                guess={guess}\n                                changeHandler={changeHandler}\n                            />\n                        </React.Fragment>) :\n                    (\n                        <Results\n                            guessList={guessList}\n                            emptyGuessList={() => setGuessList([])}\n                            setScreen={props.setScreen}\n                            albums={props.albums}\n                        />\n                    )\n            }\n        </div >\n    );\n};\n\nexport default AlbumWrapper;","import React from 'react'\nimport AlbumWrapper from './albumwrapper'\n\nconst GameScreen = (props) => {\n    return (\n        <div className=\"gamescreen\">\n            <AlbumWrapper albums={props.songs} setScreen={props.setScreen} />\n        </div>\n    )\n}\n\nexport default GameScreen;\n","const getSongsFromGenre = (genres, token) => {\n    const genre_string = genres.join(',');\n    console.log(genre_string)\n    const resp = fetch(`https://api.spotify.com/v1/recommendations?limit=10&seed_genres=${genre_string}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        },\n    }).then(resp => resp.json())\n    return resp\n}\n\nexport default getSongsFromGenre;\n","import React, { useState, useEffect } from 'react';\nimport StartScreen from './startscreen'\nimport GenreScreen from './genrescreen'\nimport GameScreen from './gamescreen'\nimport getSongsFromGenre from '../apicalls'\n\nconst Main = () => {\n    const [screen, setScreen] = useState(0);\n    const [token, setToken] = useState();\n    const [genres, setGenres] = useState([]);\n    const [songs, setSongs] = useState([]);\n    const setScreenByVal = (val) => { setScreen(val); }\n    const screens = [\n        <StartScreen setScreen={setScreenByVal} retToken={(val) => setToken(val)} />,\n        <GenreScreen setScreen={setScreenByVal} token={token} setGenres={(val) => setGenres(val)} />,\n        <GameScreen songs={songs} setScreen={setScreenByVal} />\n    ];\n    useEffect(() => {\n        if (genres.length !== 0) {\n            getSongsFromGenre(genres, token)\n                .then(resp => Array.from(resp.tracks, r => ([\n                    r.album.id,\n                    r.album.images[0].url,\n                    r.album.name,\n                    r.album.artists[0].name\n                ])))\n                .then(resp => setSongs(resp))\n        }\n    }, [genres])\n\n    return (\n        <div className=\"maindiv\">\n            {screens[screen]}\n        </div>\n    )\n}\nexport default Main;\n","import './App.css';\nimport 'react-spotify-auth/dist/index.css'\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}